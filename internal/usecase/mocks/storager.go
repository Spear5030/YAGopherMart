// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Spear5030/YAGopherMart/domain"
	mock "github.com/stretchr/testify/mock"
)

// Storager is an autogenerated mock type for the Storager type
type Storager struct {
	mock.Mock
}

// GetBalance provides a mock function with given fields: ctx, userID
func (_m *Storager) GetBalance(ctx context.Context, userID int) (float64, error) {
	ret := _m.Called(ctx, userID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, int) float64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, userID
func (_m *Storager) GetOrders(ctx context.Context, userID int) ([]domain.Order, error) {
	ret := _m.Called(ctx, userID)

	var r0 []domain.Order
	if rf, ok := ret.Get(0).(func(context.Context, int) []domain.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserHash provides a mock function with given fields: ctx, login
func (_m *Storager) GetUserHash(ctx context.Context, login string) (int, string, error) {
	ret := _m.Called(ctx, login)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, login)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetWithdrawals provides a mock function with given fields: ctx, userID
func (_m *Storager) GetWithdrawals(ctx context.Context, userID int) ([]domain.Withdraw, error) {
	ret := _m.Called(ctx, userID)

	var r0 []domain.Withdraw
	if rf, ok := ret.Get(0).(func(context.Context, int) []domain.Withdraw); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Withdraw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithdrawn provides a mock function with given fields: ctx, userID
func (_m *Storager) GetWithdrawn(ctx context.Context, userID int) (float64, error) {
	ret := _m.Called(ctx, userID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, int) float64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostOrder provides a mock function with given fields: ctx, num, userID
func (_m *Storager) PostOrder(ctx context.Context, num string, userID int) error {
	ret := _m.Called(ctx, num, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, num, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostWithdraw provides a mock function with given fields: ctx, userID, order, sum
func (_m *Storager) PostWithdraw(ctx context.Context, userID int, order string, sum float64) error {
	ret := _m.Called(ctx, userID, order, sum)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, float64) error); ok {
		r0 = rf(ctx, userID, order, sum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterUser provides a mock function with given fields: ctx, login, hash
func (_m *Storager) RegisterUser(ctx context.Context, login string, hash string) (int, error) {
	ret := _m.Called(ctx, login, hash)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, login, hash)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, accrual
func (_m *Storager) UpdateOrder(ctx context.Context, accrual domain.Accrual) error {
	ret := _m.Called(ctx, accrual)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Accrual) error); ok {
		r0 = rf(ctx, accrual)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStorager interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorager creates a new instance of Storager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorager(t mockConstructorTestingTNewStorager) *Storager {
	mock := &Storager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
